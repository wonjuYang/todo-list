{"version":3,"sources":["components/PageTemplate/PageTemplate.js","components/TodoInput/TodoInput.js","modules/input.js","modules/todos.js","containers/TodoInputContainer.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","containers/TodoListContainer.js","components/App.js","serviceWorker.js","modules/index.js","index.js"],"names":["cx","classNames","bind","styles","PageTemplate","children","className","TodoInput","value","onChange","onInsert","onKeyPress","e","key","onClick","setInput","createAction","initialState","Map","handleActions","state","action","set","payload","insert","toggle","remove","List","id","text","done","push","index","findIndex","todo","get","updateIn","delete","TodoInputContainer","getId","handleChange","target","props","InputActions","handleInsert","TodosActions","this","Component","connect","input","dispatch","bindActionCreators","inputActions","todosActions","TodoItem","nextProps","nextState","onToggle","onRemove","type","checked","readOnly","stopPropagation","TodoList","todos","todoList","map","TodoListContainer","handleToggle","handleRemove","App","Boolean","window","location","hostname","match","combineReducers","store","createStore","modules","devToolsExtension","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fbc9cecd.chunk.js","sourcesContent":["import React from 'react';\r\nimport styles from './PageTemplate.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\n/* 페이지 템플릿을 위한 컴포넌트입니다. 페이지의 틀, 그리고 타이틀/ 콘텐츠 등 속성이 설정되어 있습니다. \r\n */\r\n\r\n const PageTemplate = ({children}) => {\r\n     return(\r\n         <div className={cx('page-template')}>\r\n            <h1>일정 관리</h1>\r\n            <div className={cx('content')}>\r\n                {children}    \r\n            </div>              \r\n         </div>\r\n     );\r\n };\r\n\r\n\r\nexport default PageTemplate;","import React from 'react';\r\nimport styles from './TodoInput.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\n\r\n// input 과 버튼이 함꼐 있는 컴포넌트입니다.\r\n/*\r\n    value: input 값\r\n    onChange: input 변경 이벤트\r\n    onInstert: 추가 버튼 클릭 이벤트\r\n*/\r\n\r\nconst TodoInput = ({value, onChange, onInsert}) => {\r\n\r\n    //Enter 키가 눌리면 onInsert를 실행합니다\r\n    const handleKeyPress = (e) => {\r\n        if(e.key === 'Enter'){\r\n            onInsert();\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={cx('todo-input')}>\r\n            <input onChange={onChange} value={value} onKeyPress={handleKeyPress}/>\r\n            <div className={cx('add-button')} onClick={onInsert}>추가</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoInput;","import { Map } from 'immutable';\r\nimport { handleActions, createAction } from 'redux-actions';\r\n\r\n\r\nconst SET_INPUT = 'input/SET_INPUT';\r\n\r\nexport const setInput = createAction(SET_INPUT);\r\n\r\nconst initialState = Map({\r\n  value: ''\r\n});\r\n\r\nexport default handleActions({\r\n  [SET_INPUT]: (state, action) => {\r\n    return state.set('value', action.payload)\r\n  }\r\n}, initialState);","import { Map, List } from 'immutable';\r\nimport { handleActions, createAction } from 'redux-actions';\r\n\r\nconst INSERT = 'todos/INSERT';\r\nconst TOGGLE = 'todos/TOGGLE';\r\nconst REMOVE = 'todos/REMOVE';\r\n\r\nexport const insert = createAction(INSERT);\r\nexport const toggle = createAction(TOGGLE);\r\nexport const remove = createAction(REMOVE);\r\n\r\nconst initialState = List([\r\n  Map({\r\n    id: 0,\r\n    text: '리액트 공부하기',\r\n    done: true\r\n  }),\r\n  Map({\r\n    id: 1,\r\n    text: '컴포넌트 스타일링 해보기',\r\n    done: false\r\n  })\r\n]);\r\n\r\nexport default handleActions({\r\n  [INSERT]: (state, action) => {\r\n    /* payload 안에 있는 id, text, done에 대한 레퍼런스를 만들어줍니다.\r\n    레퍼런스를 만들지 않고, 바로 push(Map(action.payload))를 해도 되지만,\r\n    나중에 이 코드를 보게 됐을 때, \r\n    이 액션이 어떤 데이터를 처리하는지 쉽게 보기 위해서 하는 작업입니다. */\r\n    const { id, text, done } = action.payload;\r\n\r\n    return state.push(Map({\r\n      id,\r\n      text,\r\n      done\r\n    }));\r\n  },\r\n  [TOGGLE]: (state, action) => {\r\n    const { payload: id } = action;\r\n    // = const id = action.payload;\r\n    /* 비구조화 할당을 통하여 id라는 레퍼런스에 action.payload란 값을 넣습니다.\r\n    이 작업이 필수는 아니지만, 나중에 이 코드를 보게 되었을 때 여기서의 payload가\r\n    어떤 값을 의미하는지 이해하기 쉬워집니다. */\r\n\r\n    // 전달받은 id 를 가지고 index 를 조회합니다.\r\n    const index = state.findIndex(todo => todo.get('id') === id);\r\n\r\n    // updateIn을 통해 현재 값을 참조하여 반대값으로 설정합니다.\r\n    return state.updateIn([index, 'done'], done => !done);\r\n    /* updateIn을 사용하지 않는다면 다음과 같이 작성할 수도 있습니다.\r\n    return state.setIn([index, 'done'], !state.getIn([0, index]));\r\n    어떤 코드가 더 편해 보이나요? 둘 중에 여러분이 맘에 드는 코드로 작성하면 됩니다.\r\n    */\r\n  },\r\n  [REMOVE]: (state, action) => {\r\n    const { payload: id } = action;\r\n    const index = state.findIndex(todo => todo.get('id') === id);\r\n    return state.delete(index);\r\n  }\r\n}, initialState);","import React, { Component } from 'react';\r\nimport TodoInput from '../components/TodoInput';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\n// 액션 생성 함수들을 한꺼번에 불러옵니다.\r\nimport * as inputActions from '../modules/input';\r\nimport * as todosActions from '../modules/todos';\r\n\r\nclass TodoInputContainer extends Component {\r\n  id = 1\r\n  getId = () => {\r\n    return ++this.id;\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    const { value } = e.target;\r\n    const { InputActions } = this.props;\r\n    InputActions.setInput(value);\r\n  }\r\n\r\n  handleInsert = () => {\r\n    const { InputActions, TodosActions, value } = this.props;\r\n    const todo = {\r\n      id: this.getId(),\r\n      text: value,\r\n      done: false\r\n    };\r\n    TodosActions.insert(todo);\r\n    InputActions.setInput('');\r\n  }\r\n\r\n  render() {\r\n    const { value } = this.props;\r\n    const { handleChange, handleInsert } = this;\r\n    return (\r\n      <TodoInput \r\n        onChange={handleChange}\r\n        onInsert={handleInsert}\r\n        value={value}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\n/* 이번에는 mapStateToProps와 mapDispatchToProps 함수에 대한 레퍼런스를\r\n따로 만들지 않고, 그 내부에 바로 정의해주었습니다.*/\r\nexport default connect(\r\n  (state) => ({\r\n    value: state.input.get('value')\r\n  }),\r\n  (dispatch) => ({\r\n    /* bindActionCreators를 사용하면 다음 작업들을 자동으로 해줍니다:\r\n      {\r\n          actionCreator: (...params) => dispatch(actionCreator(...params))\r\n      }\r\n      그래서 이전에 우리가 했었던 것처럼 하나하나 dispatch할 필요가 없습니다.\r\n      예를 들면 InputActions의 경우 다음과 같은 작업이 되어 있는 것이죠.\r\n      InputActions: {\r\n        setInput: (value) => dispatch(inputActions.setInput(value))\r\n      }\r\n      나중에 이를 호출할 때는 this.props.InputActions.setInput을 호출하면 됩니다.\r\n    */\r\n    InputActions: bindActionCreators(inputActions, dispatch),\r\n    TodosActions: bindActionCreators(todosActions, dispatch)\r\n  })\r\n)(TodoInputContainer);","import React, { Component } from 'react';\r\nimport styles from './TodoItem.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass TodoItem extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return this.props.done !== nextProps.done;\r\n  }\r\n\r\n  render() {\r\n    const {done, children, onToggle, onRemove} = this.props;\r\n    /* 위 코드에선 비구조화 할당을 통하여 this.props 안에 있는\r\n       done, children, onToggle, onRemove 에 대한 레퍼런스를 만들어주었습니다. */\r\n    return (\r\n      <div className={cx('todo-item')} onClick={onToggle}>\r\n        <input className={cx('tick')} type=\"checkbox\" checked={done} readOnly/>\r\n        <div className={cx('text', { done })}>{children}</div>\r\n        <div className={cx('delete')} onClick={(e) => {\r\n          onRemove();\r\n          e.stopPropagation();\r\n          }\r\n        }>[지우기]</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from 'react';\r\nimport TodoItem from '../TodoItem';\r\n\r\nclass TodoList extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return this.props.todos !== nextProps.todos;\r\n  }  \r\n\r\n  render() {\r\n    const { todos, onToggle, onRemove } = this.props;\r\n    const todoList = todos.map(\r\n      todo => (\r\n        <TodoItem\r\n          key={todo.get('id')}\r\n          done={todo.get('done')}\r\n          onToggle={() => onToggle(todo.get('id'))}\r\n          onRemove={() => onRemove(todo.get('id'))}>\r\n          {todo.get('text')}\r\n        </TodoItem>\r\n      )\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        {todoList}\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default TodoList;","import React, { Component } from 'react';\r\nimport TodoList from '../components/TodoList';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport * as todosActions from '../modules/todos';\r\n\r\nclass TodoListContainer extends Component {\r\n  handleToggle = (id) => {\r\n    const { TodosActions } = this.props;\r\n    TodosActions.toggle(id);\r\n  }\r\n  handleRemove = (id) => {\r\n    const { TodosActions } = this.props;\r\n    TodosActions.remove(id);\r\n  }\r\n  render() {\r\n    const { todos } = this.props;\r\n    const { handleToggle, handleRemove } = this;\r\n\r\n    return (\r\n      <TodoList \r\n        todos={todos}\r\n        onToggle={handleToggle}\r\n        onRemove={handleRemove}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    todos: state.todos\r\n  }),\r\n  (dispatch) => ({\r\n    TodosActions: bindActionCreators(todosActions, dispatch)\r\n  })\r\n)(TodoListContainer)","import React, { Component } from 'react';\nimport PageTemplate from './PageTemplate';\nimport TodoInputContainer from '../containers/TodoInputContainer';\nimport TodoListContainer from '../containers/TodoListContainer';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <PageTemplate>\n        <TodoInputContainer/>\n        <TodoListContainer/>\n      </PageTemplate>\n    );\n  }\n}\n\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import input from './input';\r\nimport todos from './todos';\r\nimport { combineReducers } from 'redux';\r\n\r\nexport default combineReducers({\r\n    input,\r\n    todos\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './styles/main.scss';\nimport * as serviceWorker from './serviceWorker';\n\nimport modules from './modules';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(modules, window.devToolsExtension && window.devToolsExtension());\n\nReactDOM.render( \n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}